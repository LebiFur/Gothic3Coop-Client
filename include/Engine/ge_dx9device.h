#ifndef GE_DX9DEVICE_H_INCLUDED
#define GE_DX9DEVICE_H_INCLUDED

struct bSStateCache;
struct _D3DPRESENT_PARAMETERS_;
struct IDirect3D9;
struct IDirect3DIndexBuffer9;
struct IDirect3DVertexBuffer9;
struct IDirect3DBaseTexture9;

class GE_DLLIMPORT eCDX9Device :
    public eCAPIDevice
{
    public: virtual void     SetFontCreateCallback( void ( GE_STDCALL* )( void ) );
    public: virtual void     SetSpriteCreateCallback( void ( GE_STDCALL* )( void ) );
    public: virtual bEResult CreatePrimititve( eCAPIPrimitive * * );
    public: virtual bEResult CreateIndexData( eCGfxShared::eSGfxIndexBufDesc const &, eCAPIIndexData * * );
    public: virtual bEResult CreateVertexData( eCGfxShared::eSGfxVertexBufDesc const &, eCAPIVertexData * * );
    public: virtual bEResult CreateEffect( GELPVoid, GEUInt, eCAPIEffect * * );
    public: virtual bEResult PreprocessShader( eCGfxShared::eSGfxHLSLShaderSrc const &, bCString & );
    public: virtual bEResult CreateHLSLShader( eCAPIHLSLShader * * );
    public: virtual bEResult CreateTexture( eCGfxShared::eSGfxLayersDesc const &, eCAPITexture * * );
    public: virtual bEResult CreateTextureFromFile( eCGfxShared::eSGfxLayersDesc &, GELPChar const, eCAPITexture * * );
    public: virtual bEResult CreateCubeMapFromFile( eCGfxShared::eSGfxLayersDesc &, GELPChar const, eCAPICubeMap * * );
    public: virtual bEResult CreateTextureFromMemory( eCGfxShared::eSGfxLayersDesc &, GELPVoid, GEUInt, eCAPITexture * * );
    public: virtual bEResult CreateCubeMapFromMemory( eCGfxShared::eSGfxLayersDesc &, GELPVoid, GEUInt, eCAPICubeMap * * );
    public: virtual bEResult CreateCubeMap( eCGfxShared::eSGfxLayersDesc const &, eCAPICubeMap * * );
    public: virtual bEResult CreateVolume( eCGfxShared::eSGfxLayersDesc const &, eCAPIVolume * * );
    public: virtual bEResult CreateFontA( eCGfxShared::eSFontDesc &, eCAPIFont * * );
    public: virtual bEResult CreateSprite( eCGfxShared::eSSpriteDesc &, eCAPISprite * * );
    public: virtual bEResult GetImageInfoFromFile( bCString const &, eCAPIDevice::eSImageInfo & );
    public: virtual bEResult CheckDeviceFormat( eCGfxShared::eSGfxLayersDesc const &, GEBool );
    public: virtual bEResult ToggleNewMode( eCAPIDevice::eSAPIModeParameters const & );
    public: virtual bEResult IsResetNecessary( GEBool * );
    public: virtual bEResult IsResetNeeded( GEBool * );
    public: virtual bEResult Reset( void );
    public: virtual bEResult EnableClipping( GEBool );
    public: virtual bEResult GetClippingEnables( GEBool & );
    public: virtual bEResult SetScissor( bCRect const & );
    public: virtual bEResult GetScissor( bCRect & );
    public: virtual bEResult EnableScissor( GEBool );
    public: virtual GEBool   IsScissorEnabled( void );
    public: virtual bEResult SetViewport( eCGfxShared::eSGfxViewport const & );
    public: virtual bEResult GetViewport( eCGfxShared::eSGfxViewport & );
    public: virtual bEResult ClearViewport( eCGfxShared::eEViewportClear, GEU32, GEFloat, GEU32 );
    public: virtual bEResult SwapScreen( HWND__ *, bCRect const *, bCRect const * );
    public: virtual bEResult BeginScene( void );
    public: virtual bEResult EndScene( void );
    public: virtual bEResult SetMasterRenderMode( eCGfxShared::eEMasterRenderMode );
    public: virtual bEResult GetMasterRenderMode( eCGfxShared::eEMasterRenderMode * );
    public: virtual bEResult SetMasterShadeMode( eCGfxShared::eEMasterShadeMode );
    public: virtual bEResult GetMasterShadeMode( eCGfxShared::eEMasterShadeMode * );
    public: virtual bEResult SetMasterCullingMode( eCGfxShared::eEMasterCullingMode );
    public: virtual bEResult GetMasterCullingMode( eCGfxShared::eEMasterCullingMode * );
    public: virtual bEResult SetMasterDepthTesting( eCGfxShared::eEMasterCmpFunc );
    public: virtual bEResult GetMasterDepthTesting( eCGfxShared::eEMasterCmpFunc * );
    public: virtual bEResult SetMasterDepthWrite( eCGfxShared::eEMasterWrite );
    public: virtual bEResult GetMasterDepthWrite( eCGfxShared::eEMasterWrite * );
    public: virtual bEResult SetMasterDepthBias( GEBool, GEFloat, GEFloat );
    public: virtual bEResult GetMasterDepthBias( GEBool *, GEFloat *, GEFloat * );
    public: virtual bEResult SetMasterZBias( GEBool, GEU32 );
    public: virtual bEResult GetMasterZBias( GEBool *, GEU32 * );
    public: virtual bEResult SetMasterStencilTesting( eCGfxShared::eEMasterStencil, eCGfxShared::eSGfxStencilData const & );
    public: virtual bEResult GetMasterStencilTesting( eCGfxShared::eEMasterStencil *, eCGfxShared::eSGfxStencilData * );
    public: virtual bEResult SetMasterBlending( eCGfxShared::eEMasterBlending, eCGfxShared::eEMasterBlending );
    public: virtual bEResult GetMasterBlending( eCGfxShared::eEMasterBlending *, eCGfxShared::eEMasterBlending * );
    public: virtual bEResult SetMasterAlphaTesting( eCGfxShared::eEMasterAlphaTest, eCGfxShared::eSGfxAlphaTestData const & );
    public: virtual bEResult GetMasterAlphaTesting( eCGfxShared::eEMasterAlphaTest *, eCGfxShared::eSGfxAlphaTestData * );
    public: virtual bEResult SetMasterFogging( eCGfxShared::eEMasterFogging );
    public: virtual bEResult GetMasterFogging( eCGfxShared::eEMasterFogging * );
    public: virtual bEResult SetLighting( GEBool );
    public: virtual bEResult GetLighting( GEBool * );
    public: virtual bEResult SetAlphaBlending( GEBool );
    public: virtual bEResult GetAlphaBlending( GEBool * );
    public: virtual bEResult SetColorWriting( GEBool );
    public: virtual bEResult GetColorWriting( GEBool * );
    public: virtual bEResult SetAlphaWriting( GEBool );
    public: virtual bEResult GetAlphaWriting( GEBool * );
    public: virtual bEResult SetSpecularEffect( GEBool );
    public: virtual bEResult GetSpecularEffect( GEBool * );
    public: virtual bEResult SetGammaRamp( GEBool, eCGfxShared::eSGfxGammaRamp const * );
    public: virtual bEResult GetGammaRamp( eCGfxShared::eSGfxGammaRamp * );
    public: virtual bEResult SetRenderMode( eCGfxShared::eERenderMode );
    public: virtual bEResult SetShadeMode( eCGfxShared::eEShadeMode );
    public: virtual bEResult SetCullingMode( eCGfxShared::eECullingMode );
    public: virtual bEResult SetDepthTesting( eCGfxShared::eECmpFunc );
    public: virtual bEResult SetDepthWrite( eCGfxShared::eEWrite );
    public: virtual bEResult SetDepthBias( GEFloat, GEFloat );
    public: virtual bEResult SetZBias( GEU32 );
    public: virtual bEResult SetStencilTesting( eCGfxShared::eEStencil, eCGfxShared::eSGfxStencilData const & );
    public: virtual bEResult SetViewAndProjectionMatrices( bCMatrix const *, bCMatrix const * );
    public: virtual bEResult SetWorldMatrix( bCMatrix const * );
    public: virtual bEResult GetWorldMatrix( bCMatrix * );
    public: virtual bEResult SetViewMatrix( bCMatrix const * );
    public: virtual bEResult GetViewMatrix( bCMatrix * );
    public: virtual bEResult Draw( eCGfxShared::eSGfxDrawCallDesc const & );
    public: virtual bEResult DrawUP( eCGfxShared::eEPrimitiveType, GEUInt, GELPVoid const, GEUInt );
    public: virtual bEResult SetLights( GEU32, GEU32, GEBool const *, eCGfxShared::eSGfxLightData const * );
    public: virtual bEResult SetFog( eCGfxShared::eSGfxFogData & );
    public: virtual bEResult SetMaterial( eCAPIDevice::eSAPIMaterial const * );
    public: virtual bEResult SetColorFactor( GEU32 );
    public: virtual bEResult SetBlending( eCGfxShared::eEBlending, eCGfxShared::eEBlending );
    public: virtual bEResult SetAlphaTesting( eCGfxShared::eEAlphaTest, eCGfxShared::eSGfxAlphaTestData const & );
    public: virtual bEResult SetAmbientMaterialSource( eCGfxShared::eEMaterialColorSrc );
    public: virtual bEResult SetDiffuseMaterialSource( eCGfxShared::eEMaterialColorSrc );
    public: virtual bEResult SetSpecularMaterialSource( eCGfxShared::eEMaterialColorSrc );
    public: virtual bEResult SetEmissiveMaterialSource( eCGfxShared::eEMaterialColorSrc );
    public: virtual bEResult CreateVertexDeclaration( eCGfxShared::eSGfxDclElement const *, GELPVoid * );
    public: virtual bEResult DestroyVertexDeclaration( GELPVoid );
    public: virtual bEResult GetVertexDeclarationData( GELPVoid, eCGfxShared::eSGfxDclElement *, GEUInt * );
    public: virtual bEResult SetVertexDeclaration( GELPVoid );
    public: virtual bEResult CreateVertexProgram( GELPVoid, GELPVoid, GEU32 *, GEBool );
    public: virtual bEResult DestroyVertexProgram( GEU32 );
    public: virtual bEResult GetVertexProgramData( GEU32, GELPVoid, GEUInt * );
    public: virtual bEResult SetVertexProgramRegisterF( GEU32, GEFloat const *, GEU32 );
    public: virtual bEResult SetVertexProgramRegisterI( GEU32, GEInt const *, GEU32 );
    public: virtual bEResult SetVertexProgramRegisterB( GEU32, GEInt const *, GEU32 );
    public: virtual bEResult GetVertexProgramRegisterF( GEU32, GEFloat *, GEU32 );
    public: virtual bEResult GetVertexProgramRegisterI( GEU32, GEInt *, GEU32 );
    public: virtual bEResult GetVertexProgramRegisterB( GEU32, GEInt *, GEU32 );
    public: virtual bEResult SetVertexProgram( GEU32, GEBool, GEBool );
    public: virtual bEResult CreatePixelProgram( GELPVoid, GEU32 * );
    public: virtual bEResult DestroyPixelProgram( GEU32 );
    public: virtual bEResult GetPixelProgramData( GEU32, GELPVoid, GEUInt * );
    public: virtual bEResult SetPixelProgramRegisterF( GEU32, GEFloat const *, GEU32 );
    public: virtual bEResult SetPixelProgramRegisterI( GEU32, GEInt const *, GEU32 );
    public: virtual bEResult SetPixelProgramRegisterB( GEU32, GEInt const *, GEU32 );
    public: virtual bEResult GetPixelProgramRegisterF( GEU32, GEFloat *, GEU32 );
    public: virtual bEResult GetPixelProgramRegisterI( GEU32, GEInt *, GEU32 );
    public: virtual bEResult GetPixelProgramRegisterB( GEU32, GEInt *, GEU32 );
    public: virtual bEResult SetPixelProgram( GEU32 );
    public: virtual bEResult AssembleShaderProgram( GELPChar const, GEU32, eCGfxShared::eSGfxMacro *, GELPVoid *, GELPVoid * );
    public: virtual bEResult AssembleShaderProgramFromFile( GELPCChar const, eCGfxShared::eSGfxMacro *, GELPVoid *, GELPVoid * );
    public: virtual bEResult CompileEffect( eCGfxShared::eSGfxEffectSource const &, GELPVoid *, GELPVoid * );
    public: virtual bEResult CompileEffectFromFile( eCGfxShared::eSGfxEffectFileSource const &, GELPVoid *, GELPVoid * );
    public: virtual bEResult CreateAuxBuffer( GEU32, GELPVoid * );
    public: virtual bEResult DestroyAuxBuffer( GELPVoid );
    public: virtual bEResult GetAuxBuffer( GELPVoid, GELPVoid *, GEU32 * );
    public: virtual bEResult SetTextureAdressing( GEU32, eCGfxShared::eETexAddress, eCGfxShared::eETexAddress, eCGfxShared::eETexAddress );
    public: virtual bEResult SetTextureFiltering( GEU32, eCGfxShared::eETexFilter, eCGfxShared::eETexFilter, eCGfxShared::eETexFilter );
    public: virtual bEResult SetTextureCoordinateIndexAndCalc( GEU32, GEU32, eCGfxShared::eETexCoordCalc );
    public: virtual bEResult SetSamplerState( GEU32, eCGfxShared::eESamplerState, GEU32 );
    public: virtual bEResult SetTextureCoordinateTransform( GEU32, GEU32 );
    public: virtual bEResult SetTextureMatrix( GEU32, bCMatrix const * );
    public: virtual bEResult SetResultArgument( GEU32, eCGfxShared::eETexArgument );
    public: virtual bEResult SetColorCalc( GEU32, eCGfxShared::eETexOperation, eCGfxShared::eETexArgument, eCGfxShared::eETexArgument );
    public: virtual bEResult SetAlphaCalc( GEU32, eCGfxShared::eETexOperation, eCGfxShared::eETexArgument, eCGfxShared::eETexArgument );
    public: virtual bEResult CreateDepthBuffer( GEU32, GEU32, eCGfxShared::eEDepthFormat, GELPVoid * );
    public: virtual bEResult DestroyDepthBuffer( GELPVoid );
    public: virtual bEResult SetRenderTarget( GELPVoid, GELPVoid, GELPVoid );
    public: virtual bEResult GetRenderTarget( GELPVoid *, GELPVoid * );
    public: virtual bEResult GetFVFSize( GEU32, GEU32 * );
    public: virtual bEResult SetClipPlane( GEU32 );
    public: virtual bEResult SetClipPlaneData( GEU32, eCGfxShared::eSGfxPlaneData & );
    public: virtual bEResult GetClipPlaneData( GEU32, eCGfxShared::eSGfxPlaneData & );
    public: virtual bEResult SetTextureNULL( GEU32 );
    public: virtual bEResult SetIndexDataNULL( void );
    public: virtual bEResult SetVertexDataNULL( GEU32 );
    public: virtual bEResult GetMethodSupport( eCGfxShared::eSGfxAssistantMethods * );
    public: virtual bEResult GenerateLODMesh( eCAPIVertexData *, eCAPIIndexData *, eCGfxShared::eSGfxAttributeWeigths const &, bTValArray<GEFloat> const *, GEU32, eCAPIVertexData * *, eCAPIIndexData * *, GEBool );
    public: virtual bEResult CreateBox( eCGfxShared::eSGfxBoxData const &, eCAPIVertexData * *, eCAPIIndexData * * );
    public: virtual bEResult CreateCylinder( eCGfxShared::eSGfxCylinderData const &, eCAPIVertexData * *, eCAPIIndexData * * );
    public: virtual bEResult CreatePolygon( eCGfxShared::eSGfxPolygonData const &, eCAPIVertexData * *, eCAPIIndexData * * );
    public: virtual bEResult CreateSphere( eCGfxShared::eSGfxSphereData const &, eCAPIVertexData * *, eCAPIIndexData * * );
    public: virtual bEResult CreateTeapot( eCAPIVertexData * *, eCAPIIndexData * * );
    public: virtual bEResult CreateText( eCGfxShared::eSGfxTextData const &, eCAPIVertexData * *, eCAPIIndexData * * );
    public: virtual bEResult CreateTorus( eCGfxShared::eSGfxTorusData const &, eCAPIVertexData * *, eCAPIIndexData * * );
    public: virtual bEResult SaveBackbufferToFile( GELPChar const );
    public: virtual bEResult SaveBackbufferToMemory( bCMemoryStream & );
    public: virtual bEResult DrawTextA( GELPCChar const, GEU32, bCRect const & );
    public: virtual bEResult CreateOcclusionQuery( GELPVoid & );
    public: virtual bEResult DestroyOcclusionQuery( GELPVoid const );
    public: virtual bEResult BeginOcclusionTest( GELPVoid const );
    public: virtual bEResult EndOcclusionTest( GELPVoid const );
    public: virtual bEResult GetOcclusionTestInfo( GELPVoid const, GEU32 &, GEBool );
    public: virtual void     EnableOptimization( void );
    public: virtual void     DisableOptimization( void );
    public: virtual void     SetForceLowestMipMapLevel( GEBool );
    public: virtual GEBool   GetForceLowestMipMapLevel( void );
    public: virtual bEResult BeginSpriteList( eCGfxShared::eESpriteRenderOpt );
    public: virtual bEResult EndSpriteList( void );
    public: virtual bEResult FlushSpriteList( void );
    public: virtual bEResult SetSpriteListTransform( bCMatrix const & );
    public: virtual bEResult GetSpriteListTransform( bCMatrix & );
    public: virtual bEResult AddSpriteToSpriteList( eCAPITexture *, bCRect const *, bCVector const *, bCVector const *, GEU32 );
    public: virtual GEInt    CalcTextRect( eCAPIFont *, GELPCChar, GEInt, bCRect &, GEU32 );
    public: virtual GEInt    CalcTextRect( eCAPIFont *, GELPCUnicodeChar, GEInt, bCRect &, GEU32 );
    public: virtual GEInt    DrawTextViaSpriteList( eCAPIFont *, bCString const &, GEInt, bCRect const *, GEU32, GEU32 );
    public: virtual GEInt    DrawTextViaSpriteList( eCAPIFont *, bCUnicodeString const &, GEInt, bCRect const *, GEU32, GEU32 );
    public: virtual void     SetEffectCreateCallback( void ( GE_STDCALL* )( void ) );
    public: virtual void     SetTextureCreateCallback( void ( GE_STDCALL* )( void ) );
    public: virtual void     SetCubemapCreateCallback( void ( GE_STDCALL* )( void ) );
    public: virtual void     SetVolumeCreateCallback( void ( GE_STDCALL* )( void ) );
    public: virtual void     SetVertexBufferCreateCallback( void ( GE_STDCALL* )( void ) );
    public: virtual void     SetIndexBufferCreateCallback( void ( GE_STDCALL* )( void ) );
    public: virtual void     SetVertexShaderCreateCallback( void ( GE_STDCALL* )( void ) );
    public: virtual void     SetPixelShaderCreateCallback( void ( GE_STDCALL* )( void ) );
    public: virtual void     SetTextureLockCallback( void ( GE_STDCALL* )( void ) );
    public: virtual void     SetCubemapLockCallback( void ( GE_STDCALL* )( void ) );
    public: virtual void     SetVolumeLockCallback( void ( GE_STDCALL* )( void ) );
    public: virtual void     SetVertexBufferLockCallback( void ( GE_STDCALL* )( void ) );
    public: virtual void     SetIndexBufferLockCallback( void ( GE_STDCALL* )( void ) );
    public: virtual void     SetRenderStateActCallback( void ( GE_STDCALL* )( void ) );
    public: virtual void     SetTextureStageStateActCallback( void ( GE_STDCALL* )( void ) );
    public: virtual void     SetSamplerStateActCallback( void ( GE_STDCALL* )( void ) );
    public: virtual void     SetEffectActCallback( void ( GE_STDCALL* )( void ) );
    public: virtual void     SetTextureActCallback( void ( GE_STDCALL* )( void ) );
    public: virtual void     SetCubemapActCallback( void ( GE_STDCALL* )( void ) );
    public: virtual void     SetVolumeActCallback( void ( GE_STDCALL* )( void ) );
    public: virtual void     SetVertexShaderActCallback( void ( GE_STDCALL* )( void ) );
    public: virtual void     SetPixelShaderActCallback( void ( GE_STDCALL* )( void ) );
    public: virtual void     SetRenderTargetActCallback( void ( GE_STDCALL* )( void ) );
    public: virtual void     SetDrawCallback( void ( GE_STDCALL* )( void ) );
    public: virtual GEU32    GetDrawnVisualVertices( void ) const;
    public: virtual GEU32    GetDrawnVisualIndices( void ) const;
    public: virtual GEU32    GetNumDrawCalls( void ) const;
    public: virtual bEResult CreateUVAtlas( bTValArray<bCVector> const &, bTValArray<GEU32> &, bTValArray<bCVector2> &, bTValArray<GEU32> &, bTValArray<GEU32> &, GEFloat );
    public: virtual         ~eCDX9Device( void );

    protected:
        static bSStateCache            ms_ActiveStates;
        static bSStateCache            ms_CachedStates;
        static _D3DPRESENT_PARAMETERS_ ms_PresentationParameters;
        static IDirect3D9 *            ms_p3DBase;
        static GEU32                   ms_u32DrawnVisualIndices;
        static GEU32                   ms_u32DrawnVisualVertices;
        static GEU32                   ms_u32NumDrawCalls;

    public:
        eCDX9Device( eCDX9Device const & );

    public:
        eCDX9Device & operator = ( eCDX9Device const & );

    protected:
        static void ( GE_STDCALL * ms_pRegCubemapCreate )( void );
        static void ( GE_STDCALL * ms_pRegDrawCall )( void );
        static void ( GE_STDCALL * ms_pRegEffectCreate )( void );
        static void ( GE_STDCALL * ms_pRegFontCreate )( void );
        static void ( GE_STDCALL * ms_pRegIndexBufferCreate )( void );
        static void ( GE_STDCALL * ms_pRegPixelShaderCreate )( void );
        static void ( GE_STDCALL * ms_pRegPixelShaderSwitch )( void );
        static void ( GE_STDCALL * ms_pRegRenderStateSwitch )( void );
        static void ( GE_STDCALL * ms_pRegRenderTargetSwitch )( void );
        static void ( GE_STDCALL * ms_pRegSamplerStateSwitch )( void );
        static void ( GE_STDCALL * ms_pRegSpriteCreate )( void );
        static void ( GE_STDCALL * ms_pRegTextureCreate )( void );
        static void ( GE_STDCALL * ms_pRegTextureStageStateSwitch )( void );
        static void ( GE_STDCALL * ms_pRegVertexBufferCreate )( void );
        static void ( GE_STDCALL * ms_pRegVertexShaderCreate )( void );
        static void ( GE_STDCALL * ms_pRegVertexShaderSwitch )( void );
        static void ( GE_STDCALL * ms_pRegVolumeCreate )( void );
        static bEResult GE_STDCALL sCreateDevice( GEU32, eCAPIDevice::eSAPIStartParameters const &, eCAPIDevice * * );
        static void GE_STDCALL     sFinit( void );
        static bEResult GE_STDCALL sGetAdapterCount( GEU32 * );
        static bEResult GE_STDCALL sGetAdapterDesc( GEU32, eCGfxShared::eSGfxAdapterDesc * );
        static bEResult GE_STDCALL sGetAdapterDisplayMode( GEU32, eCGfxShared::eSGfxModeDesc * );
        static bEResult GE_STDCALL sGetModeCount( GEU32, GEU32 * );
        static bEResult GE_STDCALL sGetModeDesc( GEU32, GEU32, eCGfxShared::eSGfxModeDesc * );
        static void GE_STDCALL     sInit( void );
        static void GE_STDCALL     sOPTSetIndices( IDirect3DIndexBuffer9 * );
        static void GE_STDCALL     sOPTSetStreamSource( GEU32, IDirect3DVertexBuffer9 *, GEU32, GEU32 );
        static void GE_STDCALL     sOPTSetTexture( GEU32, IDirect3DBaseTexture9 * );

    protected:
        eCDX9Device( IDirect3DDevice9 * );

    protected:
        bEResult ActivateAlphaTesting( eCGfxShared::eEAlphaTest, eCGfxShared::eSGfxAlphaTestData const & );
        bEResult ActivateBlending( eCGfxShared::eEBlending, eCGfxShared::eEBlending );
        bEResult ActivateCullingMode( eCGfxShared::eECullingMode );
        bEResult ActivateDepthBias( GEFloat, GEFloat );
        bEResult ActivateDepthTesting( eCGfxShared::eECmpFunc );
        bEResult ActivateDepthWrite( eCGfxShared::eEWrite );
        bEResult ActivateRenderMode( eCGfxShared::eERenderMode );
        bEResult ActivateShadeMode( eCGfxShared::eEShadeMode );
        bEResult ActivateStencilTesting( eCGfxShared::eEStencil, eCGfxShared::eSGfxStencilData const & );
        void     AddFontWrapper( eCDX9Font * );
        void     AddSpriteWrapper( eCDX9Sprite * );
        void     CreateQuery( GELPVoid & );
        void     DestroyQuery( GELPVoid const );
        void     RemoveFontWrapper( eCDX9Font * );
        void     RemoveSpriteWrapper( eCDX9Sprite * );
        void     ResetCachedStates( void );

};

#endif
