#ifndef GE_APPLICATION_H_INCLUDED
#define GE_APPLICATION_H_INCLUDED

class eCSplash;
class eCMouse;

struct eSSetupApplication;
struct eSSetupEngine;
struct eSHardwareEnvironmentDesc;
struct eSDescRenderTarget;

struct HINSTANCE__;
struct HWND__;


class GE_DLLIMPORT eCApplication :
    public eCWindow
{
    public:    virtual eCEntity * GetEditorEntity( void ) const;
    public:    virtual GEBool     IsEditorRunning( void ) const;
    public:    virtual GEBool     IsGameRunning( void ) const;
    public:    virtual bCString   GetCompiledMeshPath( void ) const;
    public:    virtual bCString   GetCompiledMaterialLibPath( void ) const;
    public:    virtual bCString   GetCompiledAnimationPath( void ) const;
    public:    virtual bCString   GetCompiledImagePath( void ) const;
    public:    virtual bCString   GetCompiledPhysicPath( void ) const;
    public:    virtual void       Draw( HWND__ * );
    public:    virtual void       ReSize( void );
    protected: virtual void       OnEngineCreated( void );
    protected: virtual void       OnDestroyEngine( void );
    protected: virtual void       OnDestroyWorkspace( void );
    protected: virtual void       OnPostInitializeModules( void );
    protected: virtual bEResult   OnInitializeApplication( eSSetupApplication & );
    protected: virtual bEResult   OnCreateWindow( eCWindow::eSCreate & );
    protected: virtual bEResult   OnInitializeEngine( eSSetupEngine & );
    protected: virtual void       OnPostRender( void );
    protected: virtual void       OnPreRender( void );
    protected: virtual void       OnKeyboard( void );
    protected: virtual void       OnMouse( void );
    protected: virtual void       OnRenderDraw( void );
    public:    virtual void       OnRun( void );
    public:    virtual void       OnProcess( void );
    public:    virtual void       OnWorldActivate( void );
    public:    virtual void       OnWorldDeactivate( void );
    protected: virtual void       CreateMainMenu( void );
    protected: virtual bEResult   CreateWorkspace( void );
    protected: virtual void       DestroyWorkspace( void );
    protected: virtual void       CreateInputDevices( void );
    public: using bCObjectBase::CopyFrom;
    protected: virtual void       CopyFrom( eCApplication const & );
    protected: virtual GEBool     OnHandleMessage( GEUInt, GEUInt, GEI32, GEI32 * );
    public:    virtual GEBool     SaveConfigFiles( void );
    public:    virtual GEBool     LoadConfigFiles( void );
    public:    virtual void       Destroy( void );
    protected: virtual bEResult   Create( void );
    public:    virtual           ~eCApplication( void );
    public: using eCMessageHandler::HandleMessage;
    protected: virtual GEInt      HandleMessage( HWND__ *, GEUInt, GEUInt, GEI32 );
    protected: virtual GEInt      OnIdle( GEUInt, GEI32 );
    protected: virtual GEInt      OnSize( GEUInt, GEI32 );
    protected: virtual GEInt      OnPaint( GEUInt, GEI32 );
    protected: virtual GEInt      OnKillFocus( GEUInt, GEI32 );
    protected: virtual GEInt      OnSetFocus( GEUInt, GEI32 );
    protected: virtual GEInt      OnSysCommand( GEUInt, GEI32 );
    public: using eCWindow::Create;
    public: using eCWindow::OnQuit;

    protected:
        static GEBool          ms_bEngineCreated;
        static GEBool          ms_bInitialised;
        static eCApplication * ms_pApplication;
        static eCSplash *      ms_pSplash;

    public:
        static void GE_STDCALL            CreateSplashScreen( void );
        static void GE_STDCALL            DestroySplashScreen( void );
        static eCApplication & GE_STDCALL GetInstance( void );
        static GEBool GE_STDCALL          IsEngineCreated( void );
        static GEBool GE_STDCALL          IsInitialised( void );

    public:
        eCApplication( eCApplication const & );
        eCApplication( void );

    public:
        void                        ConfineCursor( void );
        bEResult                    Create( HINSTANCE__ *, bCString const &, bCString const & );
        void                        DrawTo( HWND__ * );
        void                        DrawTo( HWND__ *, eCCameraBase const & );
        void                        ForceDeviceReset( void );
        bCString                    GetApplicationFileName( void );
        bCString                    GetApplicationVersionString( void );
        GEFloat                     GetAverageFrameTime( void ) const;
        bCString const &            GetCommandLineA( void ) const;
        eCConfigFile &              GetConfigFile( void );
        eCConsole &                 GetConsole( void );
        eCCameraBase &              GetCurrentCamera( void );
        eSSetupEngine const &       GetEngineSetup( void ) const;
        GEFloat                     GetFPS( void ) const;
        void                        GetFileVersion( GEU32 &, GEU32 &, GEU32 &, GEU32 & );
        GEFloat                     GetFrameTime( void ) const;
        GEFloat                     GetFrameTimeInSeconds( void ) const;
        eSHardwareEnvironmentDesc & GetHardwareEnvironmentDesc( void );
        eCKeyboard &                GetKeyboard( void );
        GEFloat                     GetLastFrameTime( void ) const;
        GEFloat                     GetLastFrameTimeInSeconds( void ) const;
        GEFloat                     GetLastScaledFrameTime( void ) const;
        GEFloat                     GetLastScaledFrameTimeInSeconds( void ) const;
        eCConfigFile &              GetLocalConfigFile( void );
        eCMenu &                    GetMainMenu( void );
        GEU32                       GetMasterFrameCounter( void );
        GEFloat                     GetMaxFPS( void ) const;
        GEFloat                     GetMaxFrameTime( void ) const;
        eCModuleAdmin &             GetModuleAdmin( void );
        eCMouse &                   GetMouse( void );
        GEFloat                     GetOOFrameTime( void ) const;
        GEFloat                     GetOOFrameTimeInSeconds( void ) const;
        GEFloat                     GetOOScaledFrameTime( void ) const;
        GEFloat                     GetOOScaledFrameTimeInSeconds( void ) const;
        void                        GetOptimalCacheSizes( GEBool, GEU32 &, GEU32 &, GEU32 &, GEU32 &, GEU32 &, GEU32 &, GEU32 & );
        eSDescRenderTarget const &  GetRenderTargetDesc( void ) const;
        GEFloat                     GetScaledFrameTime( void ) const;
        GEFloat                     GetScaledFrameTimeInSeconds( void ) const;
        eSSetupEngine const &       GetSetupEngineDesc( void ) const;
        GEFloat                     GetTimeScaling( void ) const;
        GEU32                       GetTotalTime( void ) const;
        GEFloat                     GetTotalTimeFloat( void ) const;
        GEBool                      IsCameraValid( void ) const;
        GEBool                      IsExceptionHandlingEnabled( void ) const;
        GEBool                      IsInCompilingState( void ) const;
        GEBool                      IsInputDeviceEnabled( void );
        GEBool                      IsPaused( GEBool );
        void                        PlayVideo( bCString const & );
        void                        Process( void );
        void                        RenderAndDrawTo( HWND__ *, eCCameraBase const &, GEBool );
        void                        RenderAndDrawTo( HWND__ *, GEBool );
        bEResult                    Run( void );
        void                        SetCurrentCamera( eCCameraBase const * );
        void                        SetFixedFPS( GEFloat );
        void                        SetFixedFrameTime( GEFloat );
        void                        SetFixedFrameTimeSingleStep( GEFloat );
        void                        SetIntoCompilingState( GEBool );
        void                        SetMaxFPS( GEFloat );
        void                        SetMinFPS( GEFloat );
        void                        SetPaused( GEBool );
        void                        SetTargetWindow( HWND__ * );
        void                        SetTimeScaling( GEFloat );
        void                        SetTimerIsSmooth( GEBool );
        void                        SetWarmUp( GEBool );
        void                        ShowSplashImage( bCString const &, GEU32 );
        void GE_STDCALL             Snapshot( bCObjectRefBase *, bCEvent * );
        void GE_STDCALL             ToggleFullScreen( bCObjectRefBase *, bCEvent * );
        void                        ToggleResolution( eCGfxShared::eSGfxContextDesc const &, GEBool );

    protected:
        static GEBool GE_STDCALL g_ErrorApplicationCall( bEErrorType, GEU32 );
        static GEBool GE_STDCALL g_TerminateApplicationCall( bEErrorType, GEU32 );

    protected:
        eCApplication const & operator = ( eCApplication const & );

    protected:
        void            CalculateHardwareEnvironment( void );
        void            CopyTo( eCApplication & ) const;
        void            CreateActionMapper( void );
        void            CreateConsole( void );
        bEResult        CreateEngine( void );
        bEResult        CreateGraphicsSubsystem( eSSetupEngine &, GEBool );
        void            CreateInputSubsystem( void );
        bEResult        CreateModules( void );
        bEResult        CreateRenderTarget( void );
        void            CreateSoundSubsystem( eSSetupEngine & );
        void            DestroyActionMapper( void );
        void            DestroyConsole( void );
        void            DestroyEngine( void );
        void            DestroyGraphicsSubsystem( void );
        void            DestroyInputSubsystem( void );
        void            DestroyMainMenu( void );
        void            DestroyModules( void );
        void            DestroyRenderTarget( void );
        void            DestroySoundSubsystem( void );
        void            DoRender( GEBool );
        void            DoSnapshot( void );
        void            Invalidate( void );
        void GE_STDCALL OnCaps( bCObjectRefBase *, eCConsoleEventArg * );
        void GE_STDCALL OnMenuDLLInformation( bCObjectRefBase *, bCEvent * );
        void GE_STDCALL OnMenuDebugToggleAniInfos( bCObjectRefBase *, bCEvent * );
        void GE_STDCALL OnMenuDebugToggleBoundingBoxesClicked( bCObjectRefBase *, bCEvent * );
        void GE_STDCALL OnMenuDebugToggleEntityAxesClicked( bCObjectRefBase *, bCEvent * );
        void GE_STDCALL OnMenuDebugToggleEntityNamesClicked( bCObjectRefBase *, bCEvent * );
        void GE_STDCALL OnMenuDebugToggleModelSkeletonClicked( bCObjectRefBase *, bCEvent * );
        void GE_STDCALL OnMenuDebugToggleOcclusionCullingClicked( bCObjectRefBase *, bCEvent * );
        void GE_STDCALL OnMenuDebugViewChildDependenciesClicked( bCObjectRefBase *, bCEvent * );
        void GE_STDCALL OnPlayAni( bCObjectRefBase *, eCConsoleEventArg * );
        void GE_STDCALL OnQuit( bCObjectRefBase *, bCEvent * );
        void GE_STDCALL OnShowPosition( bCObjectRefBase *, eCConsoleEventArg * );
        void GE_STDCALL OnSpy( bCObjectRefBase *, eCConsoleEventArg * );
        void GE_STDCALL OnToggleMemDebug( bCObjectRefBase *, eCConsoleEventArg * );
        void            RelaxTick( GEFloat );
        void            ResetFullscreen( void );
        void            UpdateTick( void );

};

struct eSSetupEngine
{
    GEU8     f0[4];
    GEInt    SoundMasterVolume;
    GEInt    SoundMusicVolume;
    GEInt    SoundVoiceVolume;
    GEInt    SoundEffectVolume;
    GEInt    SoundAmbientVolume;
    GEU8     f18[4];
    GEU8     byte1C;
    GEU8     f1D[3];
    GEU32    Quality;
    GEU32    Width;
    GEU32    Height;
    GEU32    RefreshRate;
    GEU8     AdapterNumber[4];
    GEU8     byte34;
    GEU8     f35;
    GEU8     byte36;
    GEU8     f37;
    GEFloat  float38;
    GEU8     f3C[4];
    GEFloat  m_fFarClippingPlane;
    GEU8     gap_44[4];
    GEUInt   m_iCacheSizeImage;
    GEUInt   m_iCacheSizeMesh;
    GEUInt   m_iCacheSizeSound;
    GEUInt   m_iCacheSizeMaterial;
    GEUInt   m_iCacheSizeCollisionMesh;
    GEUInt   m_iCacheSizeAnimation;
    GEUInt   m_iCacheSizeSpeedTree;
    GEInt    m_uVertexpoolThreadCount;
    GEInt    m_uImageThreadCount;
    GEInt    m_uMaterialThreadCount;
    GEInt    m_uMeshThreadCount;
    GEInt    m_uSoundThreadCount;
    GEInt    m_uPVSPrefetcherCountThreadCount;
    GEInt    m_uCollisionMeshThreadCount;
    GEInt    m_uAnimationThreadCount;
    GEBool   m_bThreadingEnabled;
    GEU8     f85[19];
    GEInt    Entity_ROI;
    GEInt    dword9C;
    GEInt    dwordA0;
    GEInt    dwordA4;
    GEU8     fA8[5];
    GEU8     byteAD;
    GEU8     fAE[2];
    GEInt    dwordB0;
    GEU8     fB4[5];
    GEU8     byteB9;
    GEU8     byteBA;
    GEU8     fBB;
    GEInt    dwordBC;
    GEU8     Debug_MemoryCorruptionMonitor;
    GEU8     Debug_HeapProfiler;
    GEU8     Debug_DumpHeapProfiling;
    GEU8     Debug_ShowWindowForHeap;
    GEU8     Debug_WriteMiniDump;
    GEU8     Debug_WriteReadMe;
    GEU8     Debug_LogFileMsg;
    GEU8     byteC7;
    GEU8     fC8;
    GEU8     byteC9;
    GEU8     Debug_ExceptionHandlerEnable;
    GEU8     fCB;
    GEInt    dwordCC;
    GEU8     fD0[8];
    GEInt    dwordD8;
    GEInt    dwordDC;
    GEU8     fE0[16];
    GEInt    dwordF0;
    GEU8     byteF4;
    GEU8     fF5[3];
    GEFloat  m_fFarClippingPlaneLowPolyMesh;
    GEInt    dwordFC;
    GEInt    dword100;
    GEInt    dword104;
    GEU8     f108[8];
    GEU8     byte110;
    GEU8     byte111;
    GEU8     byte112;
    GEU8     byte113;
    GEU8     byte114;
    GEU8     byte115;
    GEU8     f116[2];
    GEU8     byte118;
    GEU8     f119[15];
    GEInt    dword128;
    GEInt    dword12C;
    GEInt    dword130;
    GEInt    dword134;
    GEInt    dword138;
    GEU8     f13C[4];
    GEU8     byte140;
    GEU8     f141[3];
    GEInt    dword144;
    GEInt    dword148;
    GEInt    dword14C;
    GEInt    dword150;
    GEInt    dword154;
    GEInt    dword158;
    GEInt    dword15C;
    GEInt    dword160;
    GEInt    dword164;
    GEInt    dword168;
    GEInt    dword16C;
    GEU8     byte170;
    GEU8     f171[3];
    GEInt    dword174;
    GEInt    dword178;
    GEInt    dword17C;
    GEInt    dword180;
    GEU8     byte184;
    GEU8     f185[3];
    GEInt    Render_FeedbackHPThreshold;
    GEInt    dword18C;
    GEInt    dword190;
    GEInt    dword194;
    GEU8     byte198;
    GEU8     f199;
    GEU8     Render_DisableHWShadowMap;
    GEU8     Render_DisableShaderCache;
    GEInt    Render_Nvidia3DVisionFix;
    GEU8     byte1A0;
    GEU8     byte1A1;
    GEU8     byte1A2;
    GEU8     f1A3;
    GEInt    dword1A4;
    GEInt    dword1A8;
    GEU8     ColorsSetup;
    GEU8     byte1AD;
    GEU8     byte1AE;
    GEU8     byte1AF;
    GEU8     CaptureCursor[12];
    GEU8     ShowSubtitle;
    GEU8     byte1BD;
    GEU8     gap1BE[34];
    bCString Difficulty;
    bCString m_DefaultFont;
    GEBool   m_bDefaultFontBold;
    GEBool   m_bAutoAspect;
    GEBool   AlternativeBalancing;
    GEBool   AlternativeAI;
    GEInt    MinHitDuration;
    GEInt    XPModifier;
    GEU8     QuickLoot;
    GEU8     gap1F5[25];
    GEU8     Debug_ShowMemStat;
    GEU8     Debug_SaveMemStat;
};

GE_ASSERT_SIZEOF( eSSetupEngine, 0x210 )

#endif
